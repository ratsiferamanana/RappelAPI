openapi: 3.0.3
info:
  title: Library Management API
  description: API for managing books and authors in a library.
  version: 1.0.0
servers:
  - url: https://mock-server.swaggerhub.com/Tsiferana/library-management-api/v1
    description: SwaggerHub Mock Server
paths:
  /books:
    get:
      summary: Get all books or filter by bookName and releaseDate
      parameters:
        - name: bookName
          in: query
          description: Filter books by name
          required: false
          schema:
            type: string
        - name: releaseDate
          in: query
          description: Filter books by release date range
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully
    put:
      summary: Update a book (idempotent)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully
    delete:
      summary: Delete a book
      responses:
        '204':
          description: Book deleted successfully
  /authors:
    get:
      summary: Get all authors or filter by authorName
      parameters:
        - name: authorName
          in: query
          description: Filter authors by name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Add a new author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author created successfully
    put:
      summary: Update an author (idempotent)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Author updated successfully
    delete:
      summary: Delete an author
      responses:
        '204':
          description: Author deleted successfully

components:
  schemas:
    Book:
      type: object
      properties:
        ID:
          type: integer
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        ID:
          type: integer
        Name:
          type: string
        Sex:
          type: string
          enum:
            - M
            - F
